---
title: "GENX Data Dashboard - 2021"
title-block-banner: true
format: 
  html:
    page-layout: full
server: shiny
---

<style>
.quarto-title-banner {
  background-image: url("images/genx.jpg");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  
  /* Make it taller */
  min-height: 150px;
  
  color: white; 
}

.quarto-title-banner .title, 
.quarto-title-banner .subtitle, 
.quarto-title-banner .author {
  text-shadow: 0 1px 3px rgba(0, 0, 0, 0.6); /* make text readable */
}

</style>

```{r, message=FALSE, warning=FALSE}
#| context: setup

library(tidyverse)
library(plotly)

chamber_levels = c("c_1_amb", "c_2_amb", "c_3_e0.75", "c_4_e1.5", "c_5_e2.25",
                   "c_6_e2.25", "c_7_e3.0", "c_8_e3.75", "c_9_e3.75",
                   "c_10_e4.5", "c_11_e5.25", "c_12_e6.0")

color.gradient=c('blue4','blue3','turquoise4','lightseagreen',
                 'mediumseagreen','limegreen','yellowgreen','yellow2',
                 'darkgoldenrod2','darkorange2','orangered1','red2')
```

```{r}
#| panel: fill
plotlyOutput('plot1')
```

```{r}
#| panel: sidebar

h4("Plot Specifications")

dateInput('today', 'Today', 
          min = "2025-03-18", max = as.Date("2025-12-31"), 
          value = as.Date("2025-09-01"))
br()
sliderInput('days_to_plot', 'Days of historical data to plot', 
            0, 
            365,
            value = 150)
br()
checkboxGroupInput('gases', 'Gases to plot', 
            choices = c("CH4", "CO2"),
            selected = c("CH4", "CO2"))
br()
radioButtons("daily", label = "Time step", 
             choices = c("Hourly", "Daily mean"), selected = ("Hourly"))
br()
radioButtons("time", label = "Time of day", 
             choices = c("Night", "Day", "All"), selected = ("All"))
br()
checkboxGroupInput('years', 'Years to plot', 
            choices = c("2021", "2022", "2023", "2024", "2025"),
            selected = c("2021", "2025"))
```

```{r}
#| context: server

slopes_l0 <- read_csv("https://raw.githubusercontent.com/abbylewis/GENX_flux_data/refs/heads/main/processed_data/L0.csv", show_col_types = F) %>%
  mutate(year = year(TIMESTAMP),
         yday = yday(TIMESTAMP))

#Code for plots
output$plot1 <- renderPlotly({
  slopes <- slopes_l0 %>%
    filter(yday <= yday(input$today),
           yday > (yday(input$today) - as.numeric(input$days_to_plot)),
           year %in% as.numeric(input$years)) 
  year(slopes$TIMESTAMP) <- 2025
  
  slopes_recent <- slopes %>% 
    rename(chamber = MIU_VALVE) %>%
    #mutate(CH4_slope_ppm_per_day = ifelse(CH4_slope_ppm_per_day > 20 & 
    #                                        CH4_R2 < 0.9,
    #                                      NA, 
    #                                      CH4_slope_ppm_per_day)) %>%
    pivot_longer(matches("CH4_|N2O_|CO2_"), 
                 names_to = c("gas", ".value"), 
                 names_sep="_" ) %>%
    filter(!gas == "Flag")
  
  if(input$time == "Night"){
    slopes_recent2 <- slopes_recent %>%
      filter(hour(TIMESTAMP) > 22 | hour(TIMESTAMP) < 4) 
    } else if (input$time == "Day") {
      slopes_recent2 <- slopes_recent %>%
        filter(hour(TIMESTAMP) > 9 & hour(TIMESTAMP) < 16) 
    } else {
        slopes_recent2 <- slopes_recent
      }
  
  if(input$daily == "Daily mean"){
    slopes_recent3 <- slopes_recent2 %>%
      mutate(TIMESTAMP = as.Date(TIMESTAMP),
             TIMESTAMP = as.POSIXct(TIMESTAMP)) %>%
      group_by(TIMESTAMP, chamber, gas, year) %>%
      summarize(slope = mean(slope, na.rm = T),
                R2 = mean(R2, na.rm = T),
                .groups = "drop")
  } else {
    slopes_recent3 <- slopes_recent2
  }
  
  p1 <- slopes_recent3 %>%
    mutate(chamber = factor(chamber, labels = chamber_levels),
           R2 = round(R2, 2)) %>%
    filter(gas %in% input$gases) %>%
    ggplot(aes(x = TIMESTAMP, y = slope, color = chamber, label = R2)) +
    geom_hline(yintercept = 0, color = "grey70") +
    geom_point(size = 0.5) +
    geom_line() +
    facet_grid(gas~year, scales = "free_y") +
    scale_color_manual(values = color.gradient)+
    theme_bw()+
    theme(axis.title.x = element_blank(),
          axis.text.x = element_text(angle = 30, vjust = 1.0, hjust = 1.0))
  
  plotly::ggplotly(p1, tooltip=c("chamber", "R2", "TIMESTAMP"))
})
```