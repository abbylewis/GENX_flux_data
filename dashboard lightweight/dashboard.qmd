---
title: "GENX Data Dashboard"
title-block-banner: true
format: 
  html:
    page-layout: full
server: shiny
---

<style>
.quarto-title-banner {
  background-image: url("images/genx.jpg");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  
  /* Make it taller */
  min-height: 150px;
  
  color: white; 
}

.quarto-title-banner .title, 
.quarto-title-banner .subtitle, 
.quarto-title-banner .author {
  text-shadow: 0 1px 3px rgba(0, 0, 0, 0.6); /* make text readable */
}

</style>

```{r, message=FALSE, warning=FALSE}
#| context: setup

library(tidyverse)
library(plotly)

slopes_l0 <- read_csv("https://raw.githubusercontent.com/abbylewis/GENX_flux_data/refs/heads/master/processed_data/L0_for_dashboard.csv", 
                      show_col_types = F) 

#met <- read_csv("./data/met_2025.csv", 
#                show_col_types = F) %>%
#  mutate(Rain_binary = Rain_Intensity > 0,
#         Vx = Wind_speed_avg * cos(Wind_direction_avg/365*2*pi),
#         Vy = Wind_speed_avg * sin(Wind_direction_avg/365*2*pi),
#         Wind_direction_170 = Vx * cos(170/365*2*pi) + Vy * sin(170/365*2*pi),
#         Wind_direction_170 = ifelse(Wind_direction_170 < 0, 0, Wind_direction_170)) %>%
#  select(-Vx, -Vy) %>%
#  pivot_longer(c(-TIMESTAMP, -Wind_direction_avg)) %>%
#  filter(!name %in% c("Rain_Duration", "Rain_Accumulation", 
#                      "Wind_speed_max")) %>%
#  mutate(Wind_direction_avg = ifelse(name == "Wind_speed_avg",
#                        Wind_direction_avg,
#                        NA))

chamber_levels = c("c_1_amb", "c_2_amb", "c_3_e0.75", "c_4_e1.5", "c_5_e2.25",
                   "c_6_e2.25", "c_7_e3.0", "c_8_e3.75", "c_9_e3.75",
                   "c_10_e4.5", "c_11_e5.25", "c_12_e6.0")

color.gradient=c('blue4','blue3','turquoise4','lightseagreen',
                 'mediumseagreen','limegreen','yellowgreen','yellow2',
                 'darkgoldenrod2','darkorange2','orangered1','red2')
```

```{r}
#| panel: fill
plotlyOutput('plot1')
#br()
#plotlyOutput('plot2')
```

```{r}
#| panel: sidebar

h4("Plot Specifications")

dateInput('today', 'Today', 
          min = "2025-03-18", max = Sys.Date(), 
          value = Sys.Date())
br()
sliderInput('days_to_plot', 'Days of historical data to plot', 
            0, 
            round(as.numeric(difftime(Sys.Date(), "2025-03-18", units = "days"))),
            value = 5)
br()
checkboxGroupInput('gases', 'Gases to plot', 
            choices = c("CH4", "CO2", "N2O"),
            selected = c("CH4", "CO2", "N2O"))
br()
radioButtons("daily", label = "Time step", 
             choices = c("Hourly", "Daily mean"), selected = ("Hourly"))
#br()
#checkboxGroupInput('met', 'Met vars to plot', 
#            choices = unique(met$name),
#            selected = c("Wind_speed_avg", "Rain_Intensity", "Wind_direction_170"))
```

```{r}
#| context: server
#Code for plots
output$plot1 <- renderPlotly({
  slopes_recent <- slopes_l0 %>%
    filter(as.Date(TIMESTAMP) <= input$today,
           TIMESTAMP > (input$today - days(input$days_to_plot))) %>% 
    rename(chamber = MIU_VALVE) %>%
    mutate(CH4_slope_ppm_per_day = ifelse(CH4_slope_ppm_per_day > 20 & 
                                            CH4_R2 < 0.9,
                                          NA, 
                                          CH4_slope_ppm_per_day)) %>%
    pivot_longer(matches("CH4_|N2O_|CO2_"), 
                 names_to = c("gas", ".value"), 
                 names_sep="_" ) %>%
    filter(!gas == "Flag")
  
  if(input$daily == "Daily mean"){
    slopes_recent2 <- slopes_recent %>%
      mutate(TIMESTAMP = as.Date(TIMESTAMP),
             TIMESTAMP = as.POSIXct(TIMESTAMP)) %>%
      group_by(TIMESTAMP, chamber, gas) %>%
      summarize(slope = mean(slope, na.rm = T),
                R2 = mean(R2, na.rm = T),
                .groups = "drop")
  } else {
    slopes_recent2 <- slopes_recent
  }
  
  p1 <- slopes_recent2 %>%
    mutate(chamber = factor(chamber, labels = chamber_levels),
           R2 = round(R2, 2)) %>%
    filter(gas %in% input$gases) %>%
    ggplot(aes(x = TIMESTAMP, y = slope, color = chamber, label = R2)) +
    geom_hline(yintercept = 0, color = "grey70") +
    geom_point(size = 0.5) +
    geom_line() +
    #geom_vline(xintercept = as_datetime("2025-05-07 14:00:00"), linetype = "dashed", color = "grey70") +
    facet_wrap(~gas, scales = "free_y", nrow = 1) +
    scale_color_manual(values = color.gradient)+
    theme_bw()+
    theme(axis.title.x = element_blank(),
          axis.text.x = element_text(angle = 30, vjust = 1.0, hjust = 1.0))
  
  plotly::ggplotly(p1, tooltip=c("chamber", "R2", "TIMESTAMP"))
})

#output$plot2 <- renderPlotly({
#  met_recent <- met %>%
#    filter(as.Date(TIMESTAMP) <= input$today,
#           TIMESTAMP > (input$today - days(input$days_to_plot))) 
#  
#  p2 <- met_recent %>%
#    filter(name %in% input$met) %>%
#    ggplot(aes(x = TIMESTAMP, y = value, color = Wind_direction_avg)) +
#    geom_point(size = 0.5) +
#    facet_wrap(~name, scales = "free_y", ncol = 1) +
#    theme_bw()+
#    scale_color_gradientn(colors = c("red", "orange", "yellow", "limegreen", "blue", "purple", "red"), na.value = #"black")+
#    theme(axis.title.x = element_blank(),
#          axis.text.x = element_text(angle = 30, vjust = 1.0, hjust = 1.0))
#  
#  plotly::ggplotly(p2)
#})
```