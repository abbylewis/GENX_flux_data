---
title: "CH~4~-cast: Data dashboard"
title-block-banner: true
format: 
  html:
    page-layout: full
server: shiny
---

<style>
/* === Title Banner === */
.quarto-title-banner {
  position: relative;
  background-image: url("images/genx.jpg");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  min-height: 75px;
  color: white;
  margin-bottom: 0;
}

.quarto-title-banner .title,
.quarto-title-banner .subtitle,
.quarto-title-banner .author {
  position: relative;
  z-index: 1;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
  padding: 0 10vw;
}

/* === Page Layout === */
.container,
.row {
  padding-left: 10vw;
  padding-right: 2vw;
}

/* === Tabs === */
.nav-tabs .nav-link {
  color: black;
}

.nav-tabs .nav-link.active {
  color: black;
  font-weight: 600;
  border-bottom: 2px solid black;
}

/* === Sidebar Inputs === */
.checkbox label,
.radio label {
  color: #444;
}

.form-check-input:checked,
.checkbox input[type="checkbox"]:checked,
.radio input[type="radio"]:checked {
  background-color: #444;
  border-color: #444;
}

.form-check-input:focus,
.checkbox input[type="checkbox"]:focus,
.radio input[type="radio"]:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.3);
}

/* SliderInput */
.irs--shiny .irs-bar,
.irs--shiny .irs-bar-edge,
.irs--shiny .irs-single,
.irs--shiny .irs-handle > i:first-child {
  background: #444;
  border-color: #444;
}

/* Date picker */
.datepicker table tr td.active,
.datepicker table tr td.active:hover,
.datepicker table tr td.active.disabled,
.datepicker table tr td.active.disabled:hover {
  background-color: #444;
  border-color: #444;
}

/* Selectize Inputs */
.selectize-input.focus {
  border-color: #444;
  box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.25);
}

/* Buttons */
.btn-primary,
.btn-primary:focus,
.btn-primary:hover {
  background-color: #444;
  border-color: #444;
}
</style>

```{r, message=FALSE, warning=FALSE}
#| context: setup

library(tidyverse)
library(plotly)

chamber_levels = c("c_1_amb", "c_2_amb", "c_3_e0.75", "c_4_e1.5", "c_5_e2.25",
                   "c_6_e2.25", "c_7_e3.0", "c_8_e3.75", "c_9_e3.75",
                   "c_10_e4.5", "c_11_e5.25", "c_12_e6.0")

color.gradient=c('blue4','blue3','turquoise4','lightseagreen',
                 'mediumseagreen','limegreen','yellowgreen','yellow2',
                 'darkgoldenrod2','darkorange2','orangered1','red2')

#For testing
input <- list()
input$gases <- c("CH₄","CO₂","N₂O")
input$today <- Sys.Date()
input$days_to_plot <- 3
input$daily <- "Hourly"
input$smooth <- "Measured"
```

::: {.row}

::: {.column width="73%"}

::: {.panel-tabset}

## Areal fluxes

```{r}
#| panel: fill

plotlyOutput('plot_flux', height = "360px")

```

## Partitioned CO~2~

```{r}
#| panel: fill

plotlyOutput('plot_co2', height = "360px")

```

## Forecasts

```{r}
#| panel: fill

plotlyOutput('plot_forecast', height = "360px")

```

:::

:::

::: {.column width="25%"}

```{r}
#| panel: sidebar

h4("Plot Specifications")

dateInput('today', 'Today', 
          min = "2025-03-18", 
          max = Sys.Date(),
          value = Sys.Date())
br()
sliderInput('days_to_plot', 'Days of historical data to plot', 
            0, 
            5,
            value = 5)
br()
splitLayout(
  cellWidths = c("50%", "50%"),
  
  # Left column
  tagList(
    checkboxGroupInput('gases', 'Gases to plot', 
                       choices = c("CH₄", "CO₂", "N₂O"),
                       selected = c("CH₄", "CO₂", "N₂O"))
  ),
  
  #Right column
  checkboxGroupInput('metrics', 'Metrics to plot', 
            choices = c("GPP", "NEE", "Reco"),
            selected = c("GPP", "NEE", "Reco"))
)
br()
splitLayout(
  cellWidths = c("50%", "50%"),
  
  # Left column
  radioButtons("daily", label = "Time step", 
             choices = c("Hourly", "Daily mean"), 
             selected = "Hourly"),
  
  #Right column
  radioButtons("smooth", label = "Line type", 
             choices = c("Measured", "Smoothed"), 
             selected = "Measured")
)
```

:::

:::

```{r}
#| context: server

#Code for plots

## MET ##
partitioned <- read_csv("https://raw.githubusercontent.com/abbylewis/GENX_flux_data/refs/heads/master/processed_data/partitioned_co2.csv", show_col_types = F) %>%
  mutate(GPP = ifelse(!is_day, 0, GPP))

updateDateInput(inputId = "today", 
                  max = as.Date(max(partitioned$DateTime)),
                  value = as.Date(max(partitioned$DateTime)))

updateSliderInput(inputId = 'days_to_plot',
                  max = round(as.numeric(difftime(as.Date(max(partitioned$DateTime)),
                                                  "2025-03-18", units = "days"))),
                  value = 5)

#Code for plots
output$plot_flux <- renderPlotly({
  part_recent <- partitioned %>%
    filter(as.Date(DateTime) <= input$today,
           DateTime > (input$today - days(input$days_to_plot))) %>% 
    rename(Chamber = MIU_VALVE) %>%
    select(c(CH4, N2O, NEE, DateTime, Chamber)) %>%
    pivot_longer(matches("CH4|N2O|NEE"), 
                 names_to = "gas") %>%
    mutate(gas = case_match(gas,
                            "CH4"~"CH₄", 
                            "CO2"~"CO₂",
                            "N2O"~"N₂O",
                            .default = gas)) %>%
    filter(!gas == "Flag")
  
  if(input$daily == "Daily mean"){
    part_recent2 <- part_recent %>%
      mutate(DateTime = as.Date(DateTime),
             DateTime = as.POSIXct(DateTime)) %>%
      group_by(DateTime, Chamber, gas) %>%
      summarize(value = mean(value, na.rm = T),
                .groups = "drop")
  } else {
    part_recent2 <- part_recent
  }
  
  p1 <- part_recent2 %>%
    mutate(Chamber = factor(Chamber, 
                            levels = 1:12,
                            labels = chamber_levels),
           gas = ifelse(gas == "NEE", "CO₂", gas)) %>%
    filter(gas %in% input$gases) %>%
    ggplot(aes(x = DateTime, y = value, color = Chamber)) +
    geom_hline(yintercept = 0, color = "grey70") +
    geom_point(size = 0.5) +
    {if(input$smooth == "Smoothed") {
      geom_smooth(se = FALSE) 
    } else{
      geom_line()
    }} +
    ylab("Flux (µmol/m²/s)")+
    facet_wrap(~gas, scales = "free_y", nrow = 1) +
    scale_color_manual(values = color.gradient)+
    theme_bw()+
    theme(axis.title.x = element_blank(),
          axis.text.x = element_text(angle = 30, vjust = 1.0, hjust = 1.0),
          strip.background = element_rect(fill = "grey95", color = "grey"))
  
  plotly::ggplotly(p1, tooltip=c("Chamber", "DateTime", "value")) %>%
    layout(
    legend = list(
      tracegroupgap = 0
    )
  )
})

#Code for plots
output$plot_co2 <- renderPlotly({
  part_recent <- partitioned %>%
    filter(as.Date(DateTime) <= input$today,
           DateTime > (input$today - days(input$days_to_plot))) %>% 
    rename(Chamber = MIU_VALVE) %>%
    select(c(NEE, GPP, Reco, DateTime, Chamber)) %>%
    pivot_longer(c(NEE, GPP, Reco), 
                 names_to = "gas") %>%
    mutate(value = ifelse(gas == "GPP", -value, value)) %>%
    filter(!gas == "Flag")
  
  if(input$daily == "Daily mean"){
    part_recent2 <- part_recent %>%
      mutate(DateTime = as.Date(DateTime),
             DateTime = as.POSIXct(DateTime)) %>%
      group_by(DateTime, Chamber, gas) %>%
      summarize(value = mean(value, na.rm = T),
                .groups = "drop")
  } else {
    part_recent2 <- part_recent
  }
  
  p1 <- part_recent2 %>%
    mutate(Chamber = factor(Chamber, 
                            levels = 1:12,
                            labels = chamber_levels)) %>%
    filter(gas %in% input$metrics) %>%
    ggplot(aes(x = DateTime, y = value, color = Chamber)) +
    geom_hline(yintercept = 0, color = "grey70") +
    geom_point(size = 0.5) +
    {if(input$smooth == "Smoothed") {
      geom_smooth(se = FALSE) 
    } else{
      geom_line()
    }} +
    ylab("Flux (µmol/m²/s)") +
    facet_wrap(~gas, nrow = 1) +
    scale_color_manual(values = color.gradient) +
    theme_bw() +
    theme(
      axis.title.x = element_blank(),
      axis.text.x = element_text(angle = 30, vjust = 1.0, hjust = 1.0),
      strip.background = element_rect(fill = "grey95", color = "grey")
    )
  
  plotly::ggplotly(p1, tooltip=c("Chamber", "DateTime", "value")) %>%
    layout(
    legend = list(
      tracegroupgap = 0
    )
  )
})

## FORECAST ##
#Code for plots
output$plot_forecast <- renderPlotly({
  forecast <- read_csv(paste0("https://raw.githubusercontent.com/abbylewis/GENX_CH4cast/refs/heads/master/outputs/daily-",input$today,"-slosh.csv.gz"),
                     show_col_types = F) 
  
  part_recent <- partitioned %>%
    filter(as.Date(DateTime) <= (input$today + days(7)),
           DateTime > (input$today - days(input$days_to_plot)),
           !CH4 < -0.02) %>% 
    rename(Chamber = MIU_VALVE) %>%
    select(c(CH4, DateTime, Chamber)) %>%
    pivot_longer(matches("CH4"), 
                 names_to = "gas") %>%
    filter(!gas == "Flag")
  
  part_recent2 <- part_recent %>%
    mutate(DateTime = as.Date(DateTime),
           DateTime = as.POSIXct(DateTime)) %>%
    group_by(DateTime, Chamber, gas) %>%
    summarize(value = mean(value, na.rm = T),
              .groups = "drop")
  
  p1 <- forecast %>%
    mutate(site_id = factor(site_id, levels = 1:12, labels = chamber_levels)) %>%
    pivot_wider(names_from = "parameter", values_from = "prediction") %>%
    ggplot(aes(x = datetime, y = mu, color = site_id, fill = site_id)) +
    geom_hline(yintercept = 0, color = "grey50") +
    geom_vline(xintercept = input$today) +
    geom_line() +
    geom_ribbon(aes(ymin = mu - sigma, ymax = mu + sigma), alpha = 0.1) +
    geom_point(
      data = part_recent2 %>%
        mutate(site_id = factor(Chamber, levels = 1:12, labels = chamber_levels)),
      aes(x = DateTime, y = value), alpha = 0.6, size = 0.75
    ) +
    scale_color_manual(values = color.gradient, name = "Chamber") +
    scale_fill_manual(values = color.gradient, name = "Chamber") +
    theme_bw() +
    theme(axis.title.x = element_blank(),
          strip.background = element_rect(fill = "grey95", color = "grey")) +
    ylab("Flux (µmol/m²/day)") +
    ggtitle(paste0("CH₄ forecasts for ", input$today))
  
  p1_plotly <- plotly::ggplotly(p1, tooltip = c("site_id", "datetime", "mu", "value"))
  
  # Clean up legend names like "(c_1_amb,orangered1)" → "c_1_amb"
  for (i in seq_along(p1_plotly$x$data)) {
    nm <- p1_plotly$x$data[[i]]$name
    if (!is.null(nm)) {
      nm_clean <- gsub("^\\(([^,]+),.*\\)$", "\\1", nm)
      nm_clean <- trimws(nm_clean)
      p1_plotly$x$data[[i]]$name <- nm_clean
    }
  }
  
  plotly::ggplotly(p1_plotly, tooltip=c("Chamber", "DateTime", "value")) %>%
    layout(
    legend = list(
      tracegroupgap = 0
    )
  )
})
```