---
title: "GENX Data Dashboard"
title-block-banner: true
format: 
  html:
    page-layout: full
server: shiny
---

<style>
.quarto-title-banner {
  background-image: url("images/genx.jpg");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  
  /* Make it taller */
  min-height: 150px;
  
  color: white; 
}

.quarto-title-banner .title, 
.quarto-title-banner .subtitle, 
.quarto-title-banner .author {
  text-shadow: 0 1px 3px rgba(0, 0, 0, 0.6); /* make text readable */
}

</style>

```{r, message=FALSE, warning=FALSE}
#| context: setup

library(tidyverse)
library(plotly)

#met <- read_csv("./data/met_2025.csv", 
#                show_col_types = F) %>%
#  mutate(Rain_binary = Rain_Intensity > 0,
#         Vx = Wind_speed_avg * cos(Wind_direction_avg/365*2*pi),
#         Vy = Wind_speed_avg * sin(Wind_direction_avg/365*2*pi),
#         Wind_direction_170 = Vx * cos(170/365*2*pi) + Vy * sin(170/365*2*pi),
#         Wind_direction_170 = ifelse(Wind_direction_170 < 0, 0, Wind_direction_170)) %>%
#  select(-Vx, -Vy) %>%
#  pivot_longer(c(-TIMESTAMP, -Wind_direction_avg)) %>%
#  filter(!name %in% c("Rain_Duration", "Rain_Accumulation", 
#                      "Wind_speed_max")) %>%
#  mutate(Wind_direction_avg = ifelse(name == "Wind_speed_avg",
#                        Wind_direction_avg,
#                        NA))

chamber_levels = c("c_1_amb", "c_2_amb", "c_3_e0.75", "c_4_e1.5", "c_5_e2.25",
                   "c_6_e2.25", "c_7_e3.0", "c_8_e3.75", "c_9_e3.75",
                   "c_10_e4.5", "c_11_e5.25", "c_12_e6.0")

color.gradient=c('blue4','blue3','turquoise4','lightseagreen',
                 'mediumseagreen','limegreen','yellowgreen','yellow2',
                 'darkgoldenrod2','darkorange2','orangered1','red2')
```

::: {.panel-tabset}

## Data

```{r}
#| panel: fill
plotlyOutput('plot1')
```

```{r}
#| panel: sidebar

h4("Plot Specifications")

dateInput('today', 'Today', 
          min = "2025-03-18", 
          max = "2025-03-19", 
          value = "2025-03-19")
br()
sliderInput('days_to_plot', 'Days of historical data to plot', 
            0, 
            5,
            value = 5)
br()
checkboxGroupInput('gases', 'Gases to plot', 
            choices = c("CH4", "CO2", "N2O"),
            selected = c("CH4", "CO2", "N2O"))
br()
radioButtons("daily", label = "Time step", 
             choices = c("Hourly", "Daily mean"), selected = ("Hourly"))
```

## Hot moments

```{r}
#| panel: fill
#| layout-ncol: 2

plotOutput('bar')
plotlyOutput('pct')
plotlyOutput('cdf')
plotlyOutput('lorenz_plot')
```

## Simulations

```{r}
#| panel: fill
plotlyOutput('sim_plot')
```

```{r}
#| panel: sidebar

h4("Simulation specifications")

sliderInput('samples_per_week', 'Samples per week', 
            0, 
            5,
            value = 1)
```

:::

```{r}
#| context: server

slopes_l0 <- read_csv("https://raw.githubusercontent.com/abbylewis/GENX_flux_data/refs/heads/main/processed_data/L0_for_dashboard.csv", show_col_types = F) 

updateDateInput(inputId = "today", 
                  max = as.Date(max(slopes_l0$TIMESTAMP)),
                  value = as.Date(max(slopes_l0$TIMESTAMP)))

updateSliderInput(inputId = 'days_to_plot',
                  max = round(as.numeric(difftime(as.Date(max(slopes_l0$TIMESTAMP)), "2025-03-18", units = "days"))),
                  value = 5)

hot_moments <- slopes_l0 %>%
    group_by(MIU_VALVE) %>%
    mutate(hot_moment_sd = ifelse(CH4_slope_ppm_per_day > 
                                    mean(CH4_slope_ppm_per_day, na.rm = T) + 
                                    2*sd(CH4_slope_ppm_per_day, na.rm = T),
                                  "hot", "not"),
           hot_moment_quant = ifelse(CH4_slope_ppm_per_day > 
                                       quantile(CH4_slope_ppm_per_day, 
                                                probs = 0.95, na.rm = TRUE),
                                     "hot", "not")) %>%
    group_by(MIU_VALVE, date) %>%
    summarize(n = sum(!is.na(CH4_slope_ppm_per_day)),
              daily = mean(CH4_slope_ppm_per_day, na.rm = T),
              n_hot = sum(hot_moment_quant == "hot"),
              daily_hot = mean(CH4_slope_ppm_per_day[hot_moment_quant == "hot"]) * n_hot/n,
              daily_hot = ifelse(n_hot == 0, 0, daily_hot),
              .groups = "drop") %>%
    mutate(chamber = factor(MIU_VALVE, levels = 1:12, labels = chamber_levels)) %>%
    filter(n >= 8) # need 8 measurements for a daily mean

hot_real_data <- hot_moments %>%
    group_by(date) %>%
    filter(sum(!is.na(daily)) == 12) %>%
    group_by(chamber) %>%
    summarize(tot = sum(daily, na.rm = T),
              tot_hot = sum(daily_hot, na.rm = T)) 

library(ineq)
lorenz <- slopes_l0 %>%
  mutate(chamber = factor(MIU_VALVE, levels = 1:12, labels = chamber_levels)) %>%
  group_by(chamber) %>%
  nest() %>%
  mutate(
    lc = map(data, ~ Lc(.x$CH4_slope_ppm_per_day)),
    lorenz_df = map(lc, ~ tibble(p = .x$p, L = .x$L))
  ) %>%
  select(chamber, lorenz_df) %>%
  unnest(lorenz_df)

#Code for plots
output$plot1 <- renderPlotly({
  slopes_recent <- slopes_l0 %>%
    filter(as.Date(TIMESTAMP) <= input$today,
           TIMESTAMP > (input$today - days(input$days_to_plot))) %>% 
    rename(chamber = MIU_VALVE) %>%
    mutate(CH4_slope_ppm_per_day = ifelse(CH4_slope_ppm_per_day > 20 & 
                                            CH4_R2 < 0.9,
                                          NA, 
                                          CH4_slope_ppm_per_day)) %>%
    pivot_longer(matches("CH4_|N2O_|CO2_"), 
                 names_to = c("gas", ".value"), 
                 names_sep="_" ) %>%
    filter(!gas == "Flag")
  
  if(input$daily == "Daily mean"){
    slopes_recent2 <- slopes_recent %>%
      mutate(TIMESTAMP = as.Date(TIMESTAMP),
             TIMESTAMP = as.POSIXct(TIMESTAMP)) %>%
      group_by(TIMESTAMP, chamber, gas) %>%
      summarize(slope = mean(slope, na.rm = T),
                R2 = mean(R2, na.rm = T),
                .groups = "drop")
  } else {
    slopes_recent2 <- slopes_recent
  }
  
  p1 <- slopes_recent2 %>%
    mutate(chamber = factor(chamber, labels = chamber_levels),
           R2 = round(R2, 2)) %>%
    filter(gas %in% input$gases) %>%
    ggplot(aes(x = TIMESTAMP, y = slope, color = chamber, label = R2)) +
    geom_hline(yintercept = 0, color = "grey70") +
    geom_point(size = 0.5) +
    geom_line() +
    #geom_vline(xintercept = as_datetime("2025-05-07 14:00:00"), linetype = "dashed", color = "grey70") +
    facet_wrap(~gas, scales = "free_y", nrow = 1) +
    scale_color_manual(values = color.gradient)+
    theme_bw()+
    theme(axis.title.x = element_blank(),
          axis.text.x = element_text(angle = 30, vjust = 1.0, hjust = 1.0))
  
  plotly::ggplotly(p1, tooltip=c("chamber", "R2", "TIMESTAMP"))
})

output$pct <- renderPlotly({
  pct <- hot_real_data %>%
    mutate(temp = sub(".+_[e|a]", "", chamber),
           temp = ifelse(temp == "mb", "0", temp),
           temp = as.numeric(temp)) %>%
    ggplot(aes(x = temp, y = tot_hot/tot*100))+
    scale_color_manual(values = color.gradient, labels = chamber_levels)+
    geom_point(aes(color = chamber))+
    ylab("What percent of emissions\ncome from the top 5% of fluxes?")+
    geom_smooth(method = "lm", data = . %>% filter(!temp == 6))+
    theme_bw()
  
  plotly::ggplotly(pct, tooltip=c("chamber"))
})

output$bar <- renderPlot({
  bar <- hot_real_data %>%
    ggplot(aes(y = chamber, x = tot, fill = chamber))+
    geom_col(show.legend = F)+
    geom_col(aes(x = tot_hot, alpha = "Hot moment emissions"), fill = "black")+
    geom_text(aes(x = tot_hot+20, y = chamber, 
                  label = paste0(round(tot_hot/tot*100), " %")),
              hjust = 0) +
    xlab("Total emissions")+
    scale_alpha_manual(name = "", values = c(0.5, 1))+
    scale_fill_manual(values = color.gradient, labels = chamber_levels)+
    theme_bw()+
    theme(axis.title.y = element_blank(),
          legend.position = "bottom")
  
  bar
})

output$cdf <- renderPlotly({
  cdf <- slopes_l0 %>%
    mutate(chamber = factor(MIU_VALVE, levels = 1:12, labels = chamber_levels)) %>%
    ggplot(aes(x = CH4_slope_ppm_per_day, color = chamber))+
    stat_ecdf()+
    scale_x_continuous(trans = "pseudo_log")+
    scale_color_manual(values = color.gradient)
  
  plotly::ggplotly(cdf, tooltip=c("chamber"))
})

output$lorenz_plot <- renderPlotly({
  lorenz_plot <- lorenz %>%
    ggplot(aes(x = p, y = L, color = chamber))+
    geom_abline()+
    geom_line()+
    scale_color_manual(values = color.gradient)+
    theme_bw()+
    ylab("Percentage of total emission")+
    xlab("Percentage of measurements")
  
  plotly::ggplotly(lorenz_plot, tooltip=c("chamber"))
})

output$sim_plot <- renderPlotly({
  reps <-  100
  df <- slopes_l0 %>%
    mutate(flux_start = as_datetime(flux_start)) %>%
    filter(!is.na(CH4_slope_ppm_per_day)) %>%
    group_by(MIU_VALVE, date) %>%
    filter(sum(!is.na(CH4_slope_ppm_per_day)) >= 8) %>%
    group_by(date) %>%
    filter(length(unique(MIU_VALVE)) == 12) %>%
    mutate(chamber = factor(MIU_VALVE, levels = 1:12, labels = chamber_levels),
           week = week(date)) 
  
  calc_mean_flux <- function(ch4_vals, days, n){
    vals <- sample(ch4_vals, n)
    return(mean(vals) * days)
  }
  
  df_out_daytime <- df %>%
    filter(hour(flux_start) > 9,
           hour(flux_start) < 17) %>%
    group_by(week) %>%
    mutate(days = length(unique(date))) %>%
    cross_join(data.frame(rep = 1:reps)) %>%
    group_by(week, chamber, rep) %>%
    summarize(flux = calc_mean_flux(CH4_slope_ppm_per_day, unique(days), input$samples_per_week))
  
  df_out_fullday <- df %>%
    group_by(week) %>%
    mutate(days = length(unique(date))) %>%
    cross_join(data.frame(rep = 1:reps)) %>%
    group_by(week, chamber, rep) %>%
    summarize(flux = calc_mean_flux(CH4_slope_ppm_per_day, unique(days), input$samples_per_week))
  
  df_out <- df_out_daytime %>%
    mutate(time = "daytime") %>%
    bind_rows(df_out_fullday %>% mutate(time = "full day"))
  
  df_out %>%
    group_by(chamber, rep, time) %>%
    summarize(tot = sum(flux, na.rm = T)) %>%
    left_join(hot_real_data %>% rename(tot_real = tot)) %>%
    ggplot(aes(y = chamber, x = tot/tot_real * 100 - 100, fill = chamber))+
    geom_vline(xintercept = 0)+
    geom_violin()+
    geom_point(aes(x = mean), data = . %>% group_by(chamber, time) %>% 
                 summarize(mean = median(tot)/tot_real * 100 - 100))+
    geom_text(aes(label = paste0(round(mean), "%"), x = -60), 
              data = . %>% group_by(chamber, time) %>% 
                summarize(mean = median(tot)/unique(tot_real) * 100 - 100))+
    ylab("Total emissions")+
    scale_fill_manual(values = color.gradient, labels = chamber_levels)+
    theme_bw()+
    facet_wrap(~time)+
    xlab("Percent difference from full dataset")
  
  sim_plot <- df_out %>%
    group_by(chamber, rep, time) %>%
    summarize(tot = sum(flux, na.rm = T)) %>%
    left_join(hot_real_data %>% rename(tot_real = tot)) %>%
    ggplot(aes(y = chamber, x = tot/tot_real * 100 - 100, fill = chamber))+
    geom_vline(xintercept = 0)+
    geom_violin(alpha = 0.5)+
    geom_point(aes(x = mean), data = . %>% group_by(chamber, time) %>% 
                 summarize(mean = median(tot)/tot_real * 100 - 100))+
    geom_text(aes(label = paste0(round(mean), "%"), x = 100), 
              hjust = 0, 
              data = . %>% group_by(chamber, time) %>% 
                summarize(mean = median(tot)/unique(tot_real) * 100 - 100))+
    ylab("Total emissions")+
    scale_fill_manual(values = color.gradient, labels = chamber_levels)+
    theme_bw()+
    facet_wrap(~time)+
    xlab("Percent difference from full dataset")
})

slopes_l0 %>%
  filter(year == 2025) %>%
  mutate(hour = hour(flux_start),
         month = month(flux_start)) %>%
  filter(!is.na(month)) %>%
  ggplot(aes(x = hour, y = CH4_slope_ppm_per_day, color = as.factor(MIU_VALVE)))+
  geom_smooth()+
  facet_wrap(~month, scales = "free_y")
```


